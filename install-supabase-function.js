// install-supabase-function.js
// Script para instalar la funci√≥n sync_productos_scraping en Supabase

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

async function installSupabaseFunction() {
  console.log('üöÄ INSTALANDO FUNCI√ìN EN SUPABASE');
  console.log('=' .repeat(50));

  try {
    // Verificar credenciales
    if (!process.env.SUPABASE_URL || !process.env.SUPABASE_KEY) {
      console.error('‚ùå Error: Variables de entorno SUPABASE_URL y SUPABASE_KEY requeridas');
      return;
    }

    // Crear cliente Supabase
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_KEY
    );

    console.log('‚úÖ Cliente Supabase inicializado');

    // Leer el archivo SQL
    const sqlPath = path.join(__dirname, 'sql', 'sync_productos_function.sql');
    
    if (!fs.existsSync(sqlPath)) {
      console.error(`‚ùå Error: No se encontr√≥ el archivo SQL en ${sqlPath}`);
      return;
    }

    const sqlContent = fs.readFileSync(sqlPath, 'utf8');
    console.log('‚úÖ Archivo SQL le√≠do correctamente');

    // Ejecutar la funci√≥n SQL
    console.log('üìù Ejecutando funci√≥n SQL en Supabase...');
    
    const { data, error } = await supabase.rpc('exec', {
      sql: sqlContent
    });

    if (error) {
      console.error('‚ùå Error ejecutando SQL:', error);
      
      // Intentar m√©todo alternativo usando query directo
      console.log('üîÑ Intentando m√©todo alternativo...');
      
      // Nota: Este m√©todo puede no estar disponible seg√∫n la configuraci√≥n de Supabase
      console.log('‚ö†Ô∏è  INSTRUCCIONES MANUALES:');
      console.log('1. Ve a tu panel de Supabase');
      console.log('2. Navega a SQL Editor');
      console.log('3. Copia y pega el contenido del archivo:');
      console.log(`   ${sqlPath}`);
      console.log('4. Ejecuta el SQL manualmente');
      console.log('');
      console.log('üìã CONTENIDO SQL A EJECUTAR:');
      console.log('-'.repeat(50));
      console.log(sqlContent);
      console.log('-'.repeat(50));
      return;
    }

    console.log('‚úÖ Funci√≥n instalada exitosamente en Supabase');
    
    // Probar la funci√≥n con datos de ejemplo
    console.log('üß™ Probando funci√≥n con datos de ejemplo...');
    
    const testData = [
      {
        nombre_producto: "Test Producto",
        entidad: "Test Banco",
        tasa: 1.5,
        tipo_producto: "Cuenta de Ahorros",
        moneda: "Soles"
      }
    ];

    const { data: testResult, error: testError } = await supabase
      .rpc('sync_productos_scraping', {
        productos_data: testData
      });

    if (testError) {
      console.error('‚ùå Error probando funci√≥n:', testError);
      return;
    }

    console.log('‚úÖ Funci√≥n probada exitosamente:');
    console.log(`   - Procesados: ${testResult.procesados}`);
    console.log(`   - Insertados: ${testResult.insertados}`);
    console.log(`   - Actualizados: ${testResult.actualizados}`);
    console.log(`   - Errores: ${testResult.errores}`);

    // Limpiar datos de prueba
    console.log('üßπ Limpiando datos de prueba...');
    await supabase
      .from('productos')
      .delete()
      .eq('nombre_producto', 'Test Producto');
    
    await supabase
      .from('entidad')
      .delete()
      .eq('nombre_entidad', 'Test Banco');

    console.log('‚úÖ Datos de prueba eliminados');
    console.log('');
    console.log('üéâ INSTALACI√ìN COMPLETADA EXITOSAMENTE!');
    console.log('La funci√≥n sync_productos_scraping est√° lista para usar');

  } catch (error) {
    console.error('üí• ERROR EN INSTALACI√ìN:', error);
    console.log('');
    console.log('üìã INSTRUCCIONES MANUALES:');
    console.log('1. Ve a tu panel de Supabase');
    console.log('2. Navega a SQL Editor');
    console.log('3. Copia y pega el contenido del archivo:');
    console.log(`   ${path.join(__dirname, 'sql', 'sync_productos_function.sql')}`);
    console.log('4. Ejecuta el SQL manualmente');
  }
}

// Ejecutar instalaci√≥n
if (require.main === module) {
  installSupabaseFunction()
    .then(() => {
      console.log('\n‚úÖ Script completado');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Script fall√≥:', error);
      process.exit(1);
    });
}

module.exports = installSupabaseFunction;
