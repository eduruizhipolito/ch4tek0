const KomparaCoolScraper = require('./src/scrapers/institutions/KomparaCoolScraper');

async function testCompleteScraper() {
  console.log('üöÄ INICIANDO TEST COMPLETO DEL SCRAPER CORREGIDO');
  
  let scraper;
  
  try {
    // Inicializar scraper
    console.log('1. Inicializando scraper...');
    scraper = new KomparaCoolScraper();
    await scraper.initialize();
    console.log('‚úÖ Scraper inicializado');
    
    // Ejecutar scraping completo
    console.log('2. Ejecutando scraping completo...');
    const startTime = Date.now();
    
    const products = await scraper.scrapeAhorrosInteractivo();
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log('\nüìä RESULTADOS DEL SCRAPING:');
    console.log(`‚è±Ô∏è Tiempo de ejecuci√≥n: ${duration}s`);
    console.log(`üì¶ Productos extra√≠dos: ${products.length}`);
    
    if (products.length > 0) {
      console.log('\nüìã PRODUCTOS ENCONTRADOS:');
      products.forEach((product, index) => {
        console.log(`  ${index + 1}. ${product.nombre_producto}`);
        console.log(`     üí∞ Tasa: ${product.tasa}% | üè¶ Banco: ${product.banco}`);
        console.log(`     üí± Moneda: ${product.moneda} | üîó URL: ${product.url_fuente}`);
        console.log('     ------------------------------------------------------------');
      });
      
      // Verificar que las tasas no son null
      const validProducts = products.filter(p => p.tasa !== null && p.tasa > 0);
      console.log(`\n‚úÖ Productos con tasas v√°lidas: ${validProducts.length}/${products.length}`);
      
      if (validProducts.length > 0) {
        console.log('üéâ ¬°SCRAPER FUNCIONANDO CORRECTAMENTE!');
        console.log('‚úÖ Navegaci√≥n exitosa a p√°gina de resultados');
        console.log('‚úÖ Extracci√≥n de tasas exitosa');
        console.log('‚úÖ Datos estructurados correctamente');
      } else {
        console.log('‚ö†Ô∏è Productos extra√≠dos pero sin tasas v√°lidas');
      }
    } else {
      console.log('‚ùå No se encontraron productos');
    }
    
  } catch (error) {
    console.error('‚ùå Error en test completo:', error.message);
    console.error('Stack trace:', error.stack);
  } finally {
    if (scraper && scraper.browser) {
      try {
        await scraper.browser.close();
        console.log('‚úÖ Browser cerrado');
      } catch (closeError) {
        console.error('Error cerrando browser:', closeError.message);
      }
    }
  }
}

testCompleteScraper().catch(console.error);
