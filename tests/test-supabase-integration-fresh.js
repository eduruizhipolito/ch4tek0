// test-supabase-integration-fresh.js
// Script para probar la integraci√≥n completa sin sesi√≥n persistente

require('dotenv').config();
const KomparaCoolScraper = require('./src/scrapers/institutions/KomparaCoolScraper');
const SupabaseSync = require('./src/services/supabaseSync');

async function testFullIntegrationFresh() {
  console.log('üöÄ INICIANDO INTEGRACI√ìN COMPLETA: SCRAPER ‚Üí SUPABASE (FRESH)');
  console.log('=' .repeat(60));
  
  const startTime = Date.now();
  
  try {
    // Paso 1: Verificar conexi√≥n a Supabase
    console.log('\nüì° PASO 1: Verificando conexi√≥n a Supabase...');
    const supabaseSync = new SupabaseSync();
    const connectionTest = await supabaseSync.testConnection();
    
    if (!connectionTest.success) {
      console.error('‚ùå Error de conexi√≥n a Supabase:', connectionTest.error);
      return;
    }
    console.log('‚úÖ Conexi√≥n a Supabase exitosa');
    
    // Paso 2: Ejecutar scraper SIN sesi√≥n persistente
    console.log('\nüîç PASO 2: Ejecutando scraper de KomparaCool (navegaci√≥n fresca)...');
    const scraper = new KomparaCoolScraper();
    
    // Forzar navegaci√≥n fresca
    const products = await scraper.scrapeAhorrosInteractivo({
      usePersistedSession: false  // ‚úÖ Forzar navegaci√≥n fresca
    });
    
    if (!products || products.length === 0) {
      console.error('‚ùå No se extrajeron productos del scraper');
      return;
    }
    
    console.log(`‚úÖ Scraper completado: ${products.length} productos extra√≠dos`);
    
    // Mostrar muestra de productos
    console.log('\nüìã MUESTRA DE PRODUCTOS EXTRA√çDOS:');
    products.slice(0, 5).forEach((product, index) => {
      console.log(`  ${index + 1}. ${product.nombre_producto}`);
      console.log(`     üè¶ Entidad: ${product.entidad}`);
      console.log(`     üí∞ Tasa: ${product.tasa}%`);
      console.log(`     üí± Moneda: ${product.moneda}`);
      console.log('     ' + '-'.repeat(50));
    });
    
    // Paso 3: Filtrar productos v√°lidos para Supabase
    console.log('\nüîß PASO 3: Preparando productos para Supabase...');
    const validProducts = products.filter(product => {
      return product.nombre_producto && 
             product.entidad && 
             product.tasa !== null && 
             product.nombre_producto.length > 3;
    });
    
    console.log(`‚úÖ Productos v√°lidos para inserci√≥n: ${validProducts.length}/${products.length}`);
    
    if (validProducts.length === 0) {
      console.error('‚ùå No hay productos v√°lidos para insertar');
      return;
    }
    
    // Paso 4: Sincronizar con Supabase usando funci√≥n almacenada
    console.log('\nüíæ PASO 4: Sincronizando con Supabase usando funci√≥n almacenada...');
    const syncResult = await supabaseSync.syncProducts(validProducts);
    
    if (!syncResult.success) {
      console.error('‚ùå Error en sincronizaci√≥n:', syncResult.error);
      return;
    }
    
    console.log('‚úÖ Sincronizaci√≥n exitosa!');
    console.log(`   üìä Productos procesados: ${syncResult.procesados}`);
    console.log(`   ‚ûï Productos insertados: ${syncResult.insertedCount}`);
    console.log(`   üîÑ Productos actualizados: ${syncResult.updatedCount}`);
    console.log(`   ‚ö†Ô∏è Errores: ${syncResult.errorCount || 0}`);
    
    if (syncResult.errors && syncResult.errors.length > 0) {
      console.log(`   üìù Detalles de errores:`);
      syncResult.errors.slice(0, 3).forEach(error => {
        console.log(`      - ${error.producto}: ${error.error}`);
      });
    }
    
    // Paso 5: Verificar estad√≠sticas finales
    console.log('\nüìà PASO 5: Verificando estad√≠sticas finales...');
    const stats = await supabaseSync.getProductStats();
    
    if (stats) {
      console.log(`‚úÖ Total productos en BD: ${stats.totalProducts}`);
      console.log('‚úÖ Productos por entidad:');
      Object.entries(stats.byEntidad).slice(0, 8).forEach(([entidad, count]) => {
        console.log(`   - ${entidad}: ${count} productos`);
      });
    }
    
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    
    console.log('\nüéâ INTEGRACI√ìN COMPLETA EXITOSA!');
    console.log('=' .repeat(60));
    console.log(`‚è±Ô∏è Tiempo total: ${duration}s`);
    console.log(`üì¶ Productos procesados: ${products.length}`);
    console.log(`üíæ Productos guardados: ${syncResult.insertedCount + syncResult.updatedCount}`);
    console.log(`üéØ Tasa de √©xito: ${(((syncResult.insertedCount + syncResult.updatedCount) / products.length) * 100).toFixed(1)}%`);
    console.log(`üè¶ Funci√≥n Supabase: sync_productos_scraping ‚úÖ`);
    
  } catch (error) {
    console.error('üí• ERROR EN INTEGRACI√ìN:', error);
    console.error('Stack trace:', error.stack);
  }
}

// Ejecutar integraci√≥n
if (require.main === module) {
  testFullIntegrationFresh()
    .then(() => {
      console.log('\n‚úÖ Script completado');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Script fall√≥:', error);
      process.exit(1);
    });
}

module.exports = testFullIntegrationFresh;
