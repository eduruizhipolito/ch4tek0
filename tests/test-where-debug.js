// test-where-debug.js
// Test para usar la funci√≥n de debug ultra-espec√≠fica de WHERE

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function testWhereDebug() {
  console.log('üîç DIAGN√ìSTICO ULTRA-ESPEC√çFICO DE WHERE');
  console.log('=' .repeat(50));

  try {
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_KEY
    );

    console.log('‚úÖ Cliente Supabase inicializado');

    // Paso 1: Crear producto de test manualmente
    console.log('\nüìù CREANDO PRODUCTO DE TEST...');
    
    // Crear entidad
    const { data: entidadData, error: entidadError } = await supabase
      .from('entidad')
      .insert([{ nombre_entidad: 'Where Debug Banco' }])
      .select()
      .single();

    if (entidadError) {
      console.error('‚ùå Error creando entidad:', entidadError);
      return;
    }

    console.log(`‚úÖ Entidad creada: ID ${entidadData.id_entidad}, Nombre: "${entidadData.nombre_entidad}"`);

    // Crear producto
    const { data: productoData, error: productoError } = await supabase
      .from('productos')
      .insert([{
        nombre_producto: 'Where Debug Producto',
        tasa: 3.5,
        id_entidad: entidadData.id_entidad,
        tipo_producto: 'ahorro',
        moneda: 'PEN'
      }])
      .select()
      .single();

    if (productoError) {
      console.error('‚ùå Error creando producto:', productoError);
      return;
    }

    console.log(`‚úÖ Producto creado: ID ${productoData.id_producto}`);
    console.log(`   Nombre: "${productoData.nombre_producto}"`);
    console.log(`   Entidad ID: ${productoData.id_entidad}`);
    console.log(`   Moneda: "${productoData.moneda}"`);
    console.log(`   Tasa: ${productoData.tasa}`);

    // Paso 2: Probar funci√≥n de debug WHERE
    console.log('\nüî¨ PROBANDO FUNCI√ìN DE DEBUG WHERE...');
    
    const testData = [{
      "nombre_producto": "Where Debug Producto",
      "entidad": "Where Debug Banco",
      "tasa": 4.0,
      "tipo_producto": "ahorro",
      "moneda": "PEN"
    }];

    const { data: debugResult, error: debugError } = await supabase
      .rpc('sync_productos_where_debug', {
        productos_data: testData
      });

    if (debugError) {
      console.error('‚ùå Error en funci√≥n debug WHERE:', debugError);
      return;
    }

    console.log('‚úÖ Resultado de debug WHERE:');
    console.log(`üìä Debug Info Completo:`);
    console.log(`   ${debugResult.debug_info}`);
    
    console.log('\nüìã An√°lisis por condici√≥n:');
    console.log(`üîç Input Nombre: "${debugResult.input_nombre}"`);
    console.log(`üîç Input Entidad: "${debugResult.input_entidad}"`);
    console.log(`üîç Input Moneda: "${debugResult.input_moneda}"`);
    console.log(`üè¶ Entidad ID encontrado: ${debugResult.entidad_id}`);
    
    console.log('\nüß™ Tests individuales:');
    console.log(`   üìù Por NOMBRE: ${debugResult.test_nombre} productos encontrados`);
    console.log(`   üè¶ Por ENTIDAD: ${debugResult.test_entidad} productos encontrados`);
    console.log(`   üí∞ Por MONEDA: ${debugResult.test_moneda} productos encontrados`);
    console.log(`   üéØ CONSULTA COMPLETA: ${debugResult.test_completo} productos encontrados`);

    // An√°lisis detallado
    console.log('\nüéØ AN√ÅLISIS DETALLADO:');
    
    if (debugResult.test_nombre > 0) {
      console.log('‚úÖ NOMBRE: La condici√≥n por nombre S√ç funciona');
    } else {
      console.log('‚ùå NOMBRE: La condici√≥n por nombre NO funciona');
    }
    
    if (debugResult.test_entidad > 0) {
      console.log('‚úÖ ENTIDAD: La condici√≥n por entidad S√ç funciona');
    } else {
      console.log('‚ùå ENTIDAD: La condici√≥n por entidad NO funciona');
    }
    
    if (debugResult.test_moneda > 0) {
      console.log('‚úÖ MONEDA: La condici√≥n por moneda S√ç funciona');
    } else {
      console.log('‚ùå MONEDA: La condici√≥n por moneda NO funciona');
    }
    
    if (debugResult.test_completo > 0) {
      console.log('‚úÖ CONSULTA COMPLETA: Todas las condiciones juntas S√ç funcionan');
      console.log('   ü§î Esto es extra√±o - deber√≠a haber encontrado el producto');
    } else {
      console.log('‚ùå CONSULTA COMPLETA: Las condiciones juntas NO funcionan');
      console.log('   üîç Una de las condiciones individuales debe estar fallando');
    }

    // Verificaci√≥n esperada
    console.log('\nüìä VERIFICACI√ìN ESPERADA:');
    console.log(`   Entidad esperada: ${entidadData.id_entidad}, Obtenida: ${debugResult.entidad_id}`);
    
    if (debugResult.entidad_id === entidadData.id_entidad) {
      console.log('‚úÖ ENTIDAD ID CORRECTO');
    } else {
      console.log('‚ùå ENTIDAD ID INCORRECTO');
    }

    // Limpiar datos de test
    console.log('\nüßπ LIMPIANDO DATOS DE TEST...');
    
    await supabase
      .from('productos')
      .delete()
      .eq('nombre_producto', 'Where Debug Producto');

    await supabase
      .from('entidad')
      .delete()
      .eq('nombre_entidad', 'Where Debug Banco');

    console.log('‚úÖ Datos de test limpiados');

  } catch (error) {
    console.error('üí• ERROR EN TEST WHERE DEBUG:', error);
  }
}

// Ejecutar test
if (require.main === module) {
  testWhereDebug()
    .then(() => {
      console.log('\n‚úÖ Test de debug WHERE completado');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Test de debug WHERE fall√≥:', error);
      process.exit(1);
    });
}

module.exports = testWhereDebug;
